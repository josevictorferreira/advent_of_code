# Advent of Code - 2021

## Setup Dependencies

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

## Day 1

### Part 1

```elixir
input = """
199
200
208
210
200
207
240
269
260
263
"""
```

```elixir
input
|> String.split("\n", trim: true)
|> Enum.map(fn value -> value |> String.to_integer() end)
|> Enum.chunk_every(2, 1, :discard)
|> Enum.count(fn [first, second] -> second > first end)
```

### Part 2

```elixir
input
|> String.split("\n", trim: true)
|> Enum.map(fn value -> value |> String.to_integer() end)
|> Enum.chunk_every(3, 1, :discard)
|> Enum.chunk_every(2, 1, :discard)
|> Enum.count(fn [[first, v1, v2], [v1, v2, last]] -> last > first end)
```

## Day 2

### Part 1

```elixir
input = """
forward 5
down 5
forward 8
up 3
down 8
forward 2
"""
```

```elixir
directions =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn value -> value |> String.split() end)
  |> Enum.map(fn [direction, value] -> [String.to_atom(direction), String.to_integer(value)] end)
  |> Enum.group_by(&List.first/1, &List.last/1)
  |> Enum.map(fn {k, v} -> {k, Enum.sum(v)} end)
```

```elixir
horizontal_positon = directions[:forward]
```

```elixir
depth = directions[:down] - directions[:up]
```

### Part 2

```elixir
new_directions =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn value -> value |> String.split() end)
  |> Enum.map(fn [direction, value] -> [String.to_atom(direction), String.to_integer(value)] end)
  |> Enum.reduce(%{horizontal: 0, depth: 0, aim: 0}, fn [direction, value], collector ->
    case direction do
      :forward ->
        %{
          horizontal: collector[:horizontal] + value,
          depth: collector[:depth] + collector[:aim] * value,
          aim: collector[:aim]
        }

      :up ->
        %{
          horizontal: collector[:horizontal],
          depth: collector[:depth],
          aim: collector[:aim] - value
        }

      :down ->
        %{
          horizontal: collector[:horizontal],
          depth: collector[:depth],
          aim: collector[:aim] + value
        }
    end
  end)
```

## Day 3

### Part 1

```elixir
input = """
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
"""
```

```elixir
v =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn v -> v |> String.split("", trim: true) end)
  |> Enum.zip_with(fn values -> values end)
  |> Enum.map(&Enum.frequencies/1)
  |> Enum.map(fn v -> v |> Enum.sort_by(fn {_k, v} -> v end, :desc) end)
  |> Enum.map(fn v -> v |> Enum.map(fn k -> Kernel.elem(k, 0) end) end)
  |> Enum.zip()
  |> Enum.map(&Tuple.to_list/1)
  |> Enum.map(&Enum.join/1)
  |> Enum.map(fn v -> v |> Integer.parse(2) |> elem(0) end)
  |> Enum.product()
```

### Part 2

```elixir
input = """
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
"""
```

```elixir
defmodule Freq do
  def calculate_freq_max(input_values, position) do
    input_values
    |> Enum.zip_with(fn values -> values end)
    |> Enum.fetch!(position)
    |> Enum.frequencies()
    |> Map.merge(%{"0" => 0, "1" => 0}, fn _k, v1, v2 -> v1 + v2 end)
    |> Enum.sort_by(fn {k, _v} -> k end, :desc)
    |> Enum.max_by(fn v -> v |> Kernel.elem(1) end)
    |> Kernel.elem(0)
  end

  def calculate_freq_min(input_values, position) do
    input_values
    |> Enum.zip_with(fn values -> values end)
    |> Enum.fetch!(position)
    |> Enum.frequencies()
    |> Map.merge(%{"0" => 0, "1" => 0}, fn _k, v1, v2 -> v1 + v2 end)
    |> Enum.sort_by(fn {k, _v} -> k end, :asc)
    |> Enum.min_by(fn v -> v |> Kernel.elem(1) end)
    |> Kernel.elem(0)
  end

  def calc_freq(remainder, pos, :oxygen) do
    calculate_freq_max(remainder, pos)
  end

  def calc_freq(remainder, pos, :o2) do
    calculate_freq_min(remainder, pos)
  end
end
```

```elixir
type = :o2

initial_binaries =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn v -> v |> String.split("", trim: true) end)

initial_binaries
|> Enum.zip_with(fn values -> values end)
|> Enum.reduce(%{remainder: initial_binaries, pos: 0}, fn _item,
                                                          %{remainder: remainder, pos: pos} ->
  if Kernel.length(remainder) == 1 do
    %{remainder: remainder, pos: pos + 1}
  else
    freq = remainder |> Freq.calc_freq(pos, type)
    new_remainder = remainder |> Enum.filter(fn x -> Enum.fetch!(x, pos) == freq end)
    %{remainder: new_remainder, pos: pos + 1}
  end
end)
|> Map.get(:remainder)
|> Enum.fetch!(0)
|> Enum.join()
|> Integer.parse(2)
|> Kernel.elem(0)
```
